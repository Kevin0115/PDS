{"version":3,"sources":["images/medical-icon.svg","images/close.svg","images/spinner.svg","images/reload.svg","ClinicItem.js","LoadingSpinner.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","modalStyle","content","height","width","top","left","right","bottom","marginRight","transform","ClinicItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modalContent","_popQueue","bind","assertThisInitialized","_showModal","_hideModal","_handleEsc","document","addEventListener","index","setState","showModal","patients","e","keyCode","_this2","map","item","react_default","a","createElement","key","className","onClick","name","care_card","_this3","fetch","clinic_id","method","then","response","error","console","warn","onRefresh","catch","lib_default","ariaHideApp","isOpen","contentLabel","style","src","Close","alt","phone","address","wait_time","_renderPatients","Component","LoadingSpinner","id","SpinnerIcon","Body","clinicList","isLoading","_refreshPage","_retrieveClinicData","res","json","log","sort","b","src_LoadingSpinner_0","src_ClinicItem_0","assign","Reload","_renderClinics","App","MedicalIcon","src_Body_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fa39594.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/medical-icon.b100c406.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.2a4c3c38.svg\";","module.exports = __webpack_public_path__ + \"static/media/spinner.337899df.svg\";","module.exports = __webpack_public_path__ + \"static/media/reload.b696d8c6.svg\";","import React, { Component } from 'react';\r\nimport Modal from 'react-modal';\r\nimport './ClinicItem.css';\r\n\r\nimport Close from './images/close.svg';\r\n\r\n// Custom styling used for patient info modal\r\nconst modalStyle = {\r\n  content : {\r\n    height: '400px',\r\n    width: '500px',\r\n    top: '50%',\r\n    left: '50%',\r\n    right: 'auto',\r\n    bottom: 'auto',\r\n    marginRight: '-50%',\r\n    transform: 'translate(-50%, -50%)'\r\n  }\r\n};\r\n\r\nclass ClinicItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalContent: {}, // Re-populated every time a patient is pressed\r\n    };\r\n    // Binds necessary functions to 'this'\r\n    this._popQueue = this._popQueue.bind(this);\r\n    this._showModal = this._showModal.bind(this);\r\n    this._hideModal = this._hideModal.bind(this);\r\n    this._handleEsc = this._handleEsc.bind(this);\r\n  }\r\n\r\n  // Binds the ESC key for convenience of exiting modal\r\n  componentWillMount() {\r\n    document.addEventListener(\"keydown\", this._handleEsc, false);\r\n  }\r\n\r\n  // The following two functions define modal open/close behaviour\r\n  _showModal(index) {\r\n    this.setState({showModal: true, modalContent: this.props.patients[index]});\r\n  }\r\n\r\n  _hideModal() {\r\n    this.setState({showModal: false});\r\n  }\r\n\r\n  // Wrapper for hideModal in case you want to press ESC instead of the X on screen\r\n  _handleEsc(e){\r\n    if(e.keyCode === 27) {\r\n      this._hideModal();\r\n    }\r\n  }\r\n  \r\n  // Renders each patient as a clickable button to open a modal with their info\r\n  _renderPatients() {\r\n    return this.props.patients.map((item, index) => {\r\n      return (\r\n        <button key={index} className=\"patient-btn\" onClick={this._showModal.bind(this, index)}>\r\n          <p key={index}>{item.name}: {item.care_card}</p>\r\n        </button>\r\n      )\r\n    });\r\n  }\r\n\r\n  // Per clinic, gives the option to discharge the top patient in the list\r\n  _popQueue() {\r\n    fetch('http://kevinpi.ddns.net/clinics/' + this.props.clinic_id + '/patients', {\r\n      method: 'DELETE',\r\n    })\r\n    .then((response) => {\r\n      if (response.error) {\r\n        console.warn('Error!', response.error);\r\n      } else {\r\n        this.props.onRefresh();\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.warn('Error: ', error);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"clinic-item\">\r\n        <Modal\r\n          ariaHideApp={false}\r\n          isOpen={this.state.showModal}\r\n          contentLabel=\"Modal\"\r\n          style={modalStyle}\r\n        >\r\n          <div className=\"modal-content\">\r\n            <button className=\"close-modal\" onClick={this._hideModal}>\r\n              <img src={Close} alt=\"X\">\r\n              </img>\r\n            </button>\r\n            <p className=\"modal-title\">\r\n              Patient Information\r\n            </p>\r\n            <p className=\"patient-info\">\r\n              Full Name: {this.state.modalContent.name}\r\n            </p>\r\n            <p className=\"patient-info\">\r\n              Care Card Number: {this.state.modalContent.care_card}\r\n            </p>\r\n            <p className=\"patient-info\">\r\n              Phone Number: {this.state.modalContent.phone}\r\n            </p>\r\n            {/* <p className=\"patient-info\">\r\n              Heart Rate: {this.state.modalContent.heart_rate} BPM\r\n            </p> */}\r\n          </div>\r\n        </Modal>\r\n        <div className=\"header\">\r\n          <p className=\"clinic-name\">\r\n            {this.props.name}\r\n          </p>\r\n          <p className=\"clinic-address\">\r\n            {this.props.address}\r\n          </p>\r\n          <p className=\"waittime\">\r\n            Wait Time: {this.props.wait_time} hours\r\n          </p>\r\n          <button className=\"pop-btn\" onClick={this._popQueue}>\r\n            Pop Queue\r\n          </button>\r\n        </div>\r\n        <div className=\"patient-list\">\r\n          {this._renderPatients()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClinicItem;\r\n","import React, { Component } from 'react';\r\nimport './LoadingSpinner.css';\r\n\r\nimport SpinnerIcon from './images/spinner.svg';\r\n\r\nclass LoadingSpinner extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"spinner\">\r\n        <img src={SpinnerIcon} id=\"spinner-icon\" alt=\"LOADING\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadingSpinner;\r\n","import React, { Component } from 'react';\r\nimport './Body.css';\r\n\r\nimport ClinicItem from './ClinicItem.js';\r\nimport LoadingSpinner from './LoadingSpinner.js';\r\nimport Reload from './images/reload.svg';\r\n\r\nclass Body extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      clinicList: [], // This will be populated upon load\r\n      isLoading: false, // Indicates when we are waiting for an HTTP request\r\n    };\r\n    this._refreshPage = this._refreshPage.bind(this);\r\n  }\r\n\r\n  // Re-fetches clinic data from server, upon refresh\r\n  _refreshPage() {\r\n    this._retrieveClinicData();\r\n  }\r\n\r\n  // API call to server to retrieve all clinic data\r\n  _retrieveClinicData() {\r\n    this.setState({isLoading: true});\r\n    fetch('http://kevinpi.ddns.net/clinics', {\r\n      method: 'GET',\r\n    }).then((res) => res.json())\r\n    .then((response) => {\r\n      if (response.error) {\r\n        console.warn('Error!', response.error);\r\n      } else {\r\n        console.log(response);\r\n        this.setState({\r\n          clinicList: response.sort((a, b) => (a.clinic_id - b.clinic_id)),\r\n          isLoading: false\r\n        });\r\n      }\r\n      // Gonna wanna set isLoading false HERE instead, with error message if needed\r\n    })\r\n    .catch((error) => {\r\n      console.warn('Error: ', error);\r\n    });\r\n  }\r\n\r\n  // Pre-loading work done here; namely, initial data fetching\r\n  componentWillMount() {\r\n    this._retrieveClinicData();\r\n  }\r\n  \r\n  // Renders all clinics in database in clean UI; when loading, shows spinner\r\n  _renderClinics() {\r\n    return this.state.isLoading ?\r\n    (\r\n    <div className=\"spinner-wrapper\">\r\n      <LoadingSpinner />\r\n    </div>\r\n    )\r\n    :\r\n    this.state.clinicList.map((item, index) => {\r\n      return (\r\n        <ClinicItem key={index} {...item} onRefresh={this._refreshPage} />\r\n      )\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"body\">\r\n        <button className=\"reload-btn\" onClick={this._refreshPage}>\r\n          <img className=\"reload\" src={Reload} alt=\"Reload\" />\r\n        </button>\r\n        {this._renderClinics()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Body;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport MedicalIcon from './images/medical-icon.svg';\r\nimport Body from './Body.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"site-header\">\r\n          <img src={MedicalIcon} alt=\"\"/>\r\n          <p>\r\n            Patient Distribution System\r\n          </p>\r\n        </div>\r\n        <div className=\"body-content\">\r\n          <Body />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}