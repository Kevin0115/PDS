{"version":3,"sources":["images/medical-icon.svg","images/close.svg","images/spinner.svg","images/reload.svg","ClinicItem.js","LoadingSpinner.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","modalStyle","content","height","width","top","left","right","bottom","marginRight","transform","ClinicItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modalContent","_popQueue","bind","assertThisInitialized","_showModal","_hideModal","_handleEsc","document","addEventListener","index","setState","showModal","patients","e","keyCode","_this2","map","item","react_default","a","createElement","key","className","onClick","name","care_card","_this3","fetch","clinic_id","method","then","response","error","console","warn","onRefresh","catch","lib_default","ariaHideApp","isOpen","contentLabel","style","src","Close","alt","phone","address","wait_time","_renderPatients","Component","LoadingSpinner","id","SpinnerIcon","Body","clinicList","isLoading","_refreshPage","_retrieveClinicData","res","json","src_LoadingSpinner_0","src_ClinicItem_0","assign","Reload","_renderClinics","App","MedicalIcon","src_Body_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yXCMlCC,EAAa,CACjBC,QAAU,CACRC,OAAQ,QACRC,MAAO,QACPC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,0BA8GAC,cAzGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,aAAc,IAEhBR,EAAKS,UAAYT,EAAKS,UAAUC,KAAfT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACjBA,EAAKY,WAAaZ,EAAKY,WAAWF,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAClBA,EAAKa,WAAab,EAAKa,WAAWH,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAClBA,EAAKc,WAAad,EAAKc,WAAWJ,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KARDA,oFAYjBe,SAASC,iBAAiB,UAAWb,KAAKW,YAAY,sCAG7CG,GACTd,KAAKe,SAAS,CAACC,WAAW,EAAMX,aAAcL,KAAKJ,MAAMqB,SAASH,0CAIlEd,KAAKe,SAAS,CAACC,WAAW,uCAGjBE,GACQ,KAAdA,EAAEC,SACHnB,KAAKU,uDAIS,IAAAU,EAAApB,KAChB,OAAOA,KAAKJ,MAAMqB,SAASI,IAAI,SAACC,EAAMR,GACpC,OACES,EAAAC,EAAAC,cAAA,UAAQC,IAAKZ,EAAOa,UAAU,cAAcC,QAASR,EAAKX,WAAWF,KAAKa,EAAMN,IAC9ES,EAAAC,EAAAC,cAAA,KAAGC,IAAKZ,GAAQQ,EAAKO,KAArB,KAA6BP,EAAKQ,kDAM9B,IAAAC,EAAA/B,KACVgC,MAAM,mCAAqChC,KAAKJ,MAAMqC,UAAY,YAAa,CAC7EC,OAAQ,WAETC,KAAK,SAACC,GACDA,EAASC,MACXC,QAAQC,KAAK,SAAUH,EAASC,OAEhCN,EAAKnC,MAAM4C,cAGdC,MAAM,SAACJ,GACNC,QAAQC,KAAK,UAAWF,sCAK1B,OACEd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,aAAa,EACbC,OAAQ5C,KAAKI,MAAMY,UACnB6B,aAAa,QACbC,MAAO7D,GAEPsC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAAcC,QAAS5B,KAAKU,YAC5Ca,EAAAC,EAAAC,cAAA,OAAKsB,IAAKC,IAAOC,IAAI,OAGvB1B,EAAAC,EAAAC,cAAA,KAAGE,UAAU,eAAb,uBAGAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,gBAAb,cACc3B,KAAKI,MAAMC,aAAawB,MAEtCN,EAAAC,EAAAC,cAAA,KAAGE,UAAU,gBAAb,qBACqB3B,KAAKI,MAAMC,aAAayB,WAE7CP,EAAAC,EAAAC,cAAA,KAAGE,UAAU,gBAAb,iBACiB3B,KAAKI,MAAMC,aAAa6C,SAI7C3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,eACV3B,KAAKJ,MAAMiC,MAEdN,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBACV3B,KAAKJ,MAAMuD,SAEd5B,EAAAC,EAAAC,cAAA,KAAGE,UAAU,YAAb,cACc3B,KAAKJ,MAAMwD,UADzB,UAGA7B,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAAUC,QAAS5B,KAAKM,WAA1C,cAIFiB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACZ3B,KAAKqD,2BAnGSC,sCCJVC,mLARX,OACEhC,EAAAC,EAAAC,cAAA,OAAK+B,GAAG,WACNjC,EAAAC,EAAAC,cAAA,OAAKsB,IAAKU,IAAaD,GAAG,eAAeP,IAAI,oBAJxBK,8BCkEdI,cA/Db,SAAAA,EAAY9D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0D,IACjB7D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4D,GAAAvD,KAAAH,KAAMJ,KACDQ,MAAQ,CACXuD,WAAY,GACZC,WAAW,GAEb/D,EAAKgE,aAAehE,EAAKgE,aAAatD,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANHA,8EAUjBG,KAAK8D,oEAGe,IAAA1C,EAAApB,KACpBA,KAAKe,SAAS,CAAC6C,WAAW,IAC1B5B,MAAM,kCAAmC,CACvCE,OAAQ,QACPC,KAAK,SAAC4B,GAAD,OAASA,EAAIC,SACpB7B,KAAK,SAACC,GACDA,EAASC,MACXC,QAAQC,KAAK,SAAUH,EAASC,OAEhCjB,EAAKL,SAAS,CAAC4C,WAAYvB,EAAUwB,WAAW,MAInDnB,MAAM,SAACJ,GACNC,QAAQC,KAAK,UAAWF,kDAK1BzB,SAASC,iBAAiB,UAAWb,KAAKW,YAAY,GACtDX,KAAK8D,+DAGU,IAAA/B,EAAA/B,KACf,OAAOA,KAAKI,MAAMwD,UAElBrC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAACwC,EAAD,OAIFjE,KAAKI,MAAMuD,WAAWtC,IAAI,SAACC,EAAMR,GAC/B,OACES,EAAAC,EAAAC,cAACyC,EAADpE,OAAAqE,OAAA,CAAYzC,IAAKZ,GAAWQ,EAA5B,CAAkCkB,UAAWT,EAAK8B,mDAMtD,OACEtC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,aAAaC,QAAS5B,KAAK6D,cAC3CtC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAASoB,IAAKqB,IAAQnB,IAAI,YAE1CjD,KAAKqE,yBA1DKf,aCiBJgB,mLAhBX,OACE/C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAA,OAAKsB,IAAKwB,IAAatB,IAAI,KAC3B1B,EAAAC,EAAAC,cAAA,yCAIFF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAC+C,EAAD,eAXQlB,aCMEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASpE,SAASqE,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.2406e7c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/medical-icon.402ad07e.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.1f49e190.svg\";","module.exports = __webpack_public_path__ + \"static/media/spinner.44203b3e.svg\";","module.exports = __webpack_public_path__ + \"static/media/reload.29048924.svg\";","import React, { Component } from 'react';\nimport Modal from 'react-modal';\nimport './ClinicItem.css';\n\nimport Close from './images/close.svg';\n\nconst modalStyle = {\n  content : {\n    height: '400px',\n    width: '500px',\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\nclass ClinicItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalContent: {},\n    };\n    this._popQueue = this._popQueue.bind(this);\n    this._showModal = this._showModal.bind(this);\n    this._hideModal = this._hideModal.bind(this);\n    this._handleEsc = this._handleEsc.bind(this);\n  }\n\n  componentWillMount() {\n    document.addEventListener(\"keydown\", this._handleEsc, false);\n  }\n\n  _showModal(index) {\n    this.setState({showModal: true, modalContent: this.props.patients[index]});\n  }\n\n  _hideModal() {\n    this.setState({showModal: false});\n  }\n\n  _handleEsc(e){\n    if(e.keyCode === 27) {\n      this._hideModal();\n    }\n  }\n  \n  _renderPatients() {\n    return this.props.patients.map((item, index) => {\n      return (\n        <button key={index} className=\"patient-btn\" onClick={this._showModal.bind(this, index)}>\n          <p key={index}>{item.name}: {item.care_card}</p>\n        </button>\n      )\n    });\n  }\n\n  _popQueue() {\n    fetch('http://kevinpi.ddns.net/clinics/' + this.props.clinic_id + '/patients', {\n      method: 'DELETE',\n    })\n    .then((response) => {\n      if (response.error) {\n        console.warn('Error!', response.error);\n      } else {\n        this.props.onRefresh();\n      }\n    })\n    .catch((error) => {\n      console.warn('Error: ', error);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"clinic-item\">\n        <Modal\n          ariaHideApp={false}\n          isOpen={this.state.showModal}\n          contentLabel=\"Modal\"\n          style={modalStyle}\n        >\n          <div className=\"modal-content\">\n            <button className=\"close-modal\" onClick={this._hideModal}>\n              <img src={Close} alt=\"X\">\n              </img>\n            </button>\n            <p className=\"modal-title\">\n              Patient Information\n            </p>\n            <p className=\"patient-info\">\n              Full Name: {this.state.modalContent.name}\n            </p>\n            <p className=\"patient-info\">\n              Care Card Number: {this.state.modalContent.care_card}\n            </p>\n            <p className=\"patient-info\">\n              Phone Number: {this.state.modalContent.phone}\n            </p>\n          </div>\n        </Modal>\n        <div className=\"header\">\n          <p className=\"clinic-name\">\n            {this.props.name}\n          </p>\n          <p className=\"clinic-address\">\n            {this.props.address}\n          </p>\n          <p className=\"waittime\">\n            Wait Time: {this.props.wait_time} hours\n          </p>\n          <button className=\"pop-btn\" onClick={this._popQueue}>\n            Pop Queue\n          </button>\n        </div>\n        <div className=\"patient-list\">\n          {this._renderPatients()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ClinicItem;\n","import React, { Component } from 'react';\nimport './LoadingSpinner.css';\n\nimport SpinnerIcon from './images/spinner.svg';\n\nclass LoadingSpinner extends Component {\n  render() {\n    return (\n      <div id=\"spinner\">\n        <img src={SpinnerIcon} id=\"spinner-icon\" alt=\"LOADING\" />\n      </div>\n    );\n  }\n}\n\nexport default LoadingSpinner;\n","import React, { Component } from 'react';\nimport './Body.css';\n\nimport ClinicItem from './ClinicItem.js';\nimport LoadingSpinner from './LoadingSpinner.js';\nimport Reload from './images/reload.svg';\n\nclass Body extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clinicList: [],\n      isLoading: false,\n    };\n    this._refreshPage = this._refreshPage.bind(this);\n  }\n\n  _refreshPage() {\n    this._retrieveClinicData();\n  }\n\n  _retrieveClinicData() {\n    this.setState({isLoading: true});\n    fetch('http://kevinpi.ddns.net/clinics', {\n      method: 'GET',\n    }).then((res) => res.json())\n    .then((response) => {\n      if (response.error) {\n        console.warn('Error!', response.error);\n      } else {\n        this.setState({clinicList: response, isLoading: false});\n      }\n      // Gonna wanna set isLoading false HERE instead, with error message if needed\n    })\n    .catch((error) => {\n      console.warn('Error: ', error);\n    });\n  }\n\n  componentWillMount() {\n    document.addEventListener(\"keydown\", this._handleEsc, false);\n    this._retrieveClinicData();\n  }\n  \n  _renderClinics() {\n    return this.state.isLoading ?\n    (\n    <div className=\"spinner-wrapper\">\n      <LoadingSpinner />\n    </div>\n    )\n    :\n    this.state.clinicList.map((item, index) => {\n      return (\n        <ClinicItem key={index} {...item} onRefresh={this._refreshPage} />\n      )\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"body\">\n        <button className=\"reload-btn\" onClick={this._refreshPage}>\n          <img className=\"reload\" src={Reload} alt=\"Reload\" />\n        </button>\n        {this._renderClinics()}\n      </div>\n    );\n  }\n}\n\nexport default Body;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport MedicalIcon from './images/medical-icon.svg';\nimport Body from './Body.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"site-header\">\n          <img src={MedicalIcon} alt=\"\"/>\n          <p>\n            Patient Distribution System\n          </p>\n        </div>\n        <div className=\"body-content\">\n          <Body />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}